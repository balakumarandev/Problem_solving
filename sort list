/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if (head == null || head.next == null)
      return head;
        
    
    ListNode prev = null, slow = head, fast = head;
    
    while (fast != null && fast.next != null) {
      prev = slow;
      slow = slow.next;
      fast = fast.next.next;
    }
    
    prev.next = null;
    
    ListNode l1 = sortList(head);
    ListNode l2 = sortList(slow);
        return merge(l1,l2);      

        
    }
    

    public static ListNode merge(ListNode left, ListNode right){
        ListNode finalans = new ListNode(0);
          ListNode ans = finalans;       

        while(left!=null && right!=null){
            if(left.val < right.val){
                ans.next = left;
                            
                left = left.next;   
            }
            else{
                ans.next = right;
                
                right = right.next;
            }
            ans = ans.next;
        }
        if(left != null){
            ans.next = left;                    
        }
        if(right != null){
            ans.next = right;           
        }
        return finalans.next;
    }
}
